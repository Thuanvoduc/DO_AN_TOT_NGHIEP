// Import Firebase SDK
import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
import { getDatabase, ref, onValue, set, remove, update } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-database.js";
import { getAuth, signInAnonymously } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";

// ‚úÖ Config Firebase
const firebaseConfig = {
    apiKey: "AIzaSyDML_o7tVQOf7wrzdA3NasklY5Wb3cPCjo",
    authDomain: "do-an-tot-nghiep-9ac13.firebaseapp.com",
    databaseURL: "https://do-an-tot-nghiep-9ac13-default-rtdb.firebaseio.com",
    projectId: "do-an-tot-nghiep-9ac13",
    storageBucket: "do-an-tot-nghiep-9ac13.firebasestorage.app",
    messagingSenderId: "730219064422",
    appId: "1:730219064422:web:cc34bf274e9cbb5fda11a7",
    measurementId: "G-B8T2P01SNJ"
};

// ‚úÖ Kh·ªüi t·∫°o Firebase
const app = initializeApp(firebaseConfig);
const db = getDatabase(app);
const auth = getAuth(app);

// ‚úÖ formatDate
function formatDateVN(dateStr) {
    const date = new Date(dateStr);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const seconds = String(date.getSeconds()).padStart(2, '0');
    return `${day}-${month}-${year} ${hours}:${minutes}:${seconds}`;
}

// ‚úÖ Load danh s√°ch UID Pending
function loadPending() {
    const pendingRef = ref(db, "Pending");
    onValue(pendingRef, (snapshot) => {
        const container = $("#pendingList");
        container.empty();

        const data = snapshot.val();
        if (!data) {
            container.html("<p>Kh√¥ng c√≥ UID n√†o pending ‚úÖ</p>");
            return;
        }

        $.each(data, function (uid, info) {
            const div = $(`
                <div class="uid-item">
                    UID: ${uid} - CreatedAt: ${info.time}
                    <button class="approve-btn" data-uid="${uid}">Duy·ªát</button>
                    <button class="reject-btn" data-uid="${uid}">X√≥a</button>
                </div>
            `);
            container.append(div);
        });
    });
}

// Load danh s√°ch Student List
function loadStudentList() {
    const studentRef = ref(db, "USER");
    onValue(studentRef, (snapshot) => {
        const data = snapshot.val();
        console.log("üìå D·ªØ li·ªáu l·∫•y t·ª´ Firebase USER:", data);

        const container = $("#studentList");
        container.empty();

        if (!data) {
            container.append(`
                <tr><td colspan="8" class="text-center">Kh√¥ng c√≥ h·ªçc sinh n√†o ‚ùå</td></tr>
            `);
            return;
        }

        // ‚úÖ Duy·ªát qua t·ª´ng h·ªçc sinh v√† hi·ªÉn th·ªã
        $.each(data, function (uid, info) {
            console.log(`‚úÖ UID: ${uid}`, info);

            const row = $(`
                <tr>
                    <td>${uid}</td>
                    <td>${info.name || ""}</td>
                    <td>${info.class || ""}</td>
                    <td>${info.parentPhone || ""}</td>
                    <td>${info.phone || ""}</td>
                    <td>${info.address || ""}</td>
                    <td>${info.gender || ""}</td>
                    <td>${info.dob || ""}</td>
                    <td>
                        <button class="btn btn-warning btn-sm edit-btn" data-uid="${uid}">‚úèÔ∏è S·ª≠a</button>
                        <button class="btn btn-danger btn-sm delete-btn" data-uid="${uid}">üóëÔ∏è X√≥a</button>
                        <button class="btn btn-success btn-sm view-info-btn" data-uid="${uid}">‚ÑπÔ∏è Th√¥ng tin</button>
                        <button class="btn btn-primary btn-sm view-history-btn" data-uid="${uid}">üìú L·ªãch s·ª≠</button>
                </tr>
            `);

            container.append(row);
        });
    });
}

// Load l·ªãch s·ª≠ qu·∫πt th·∫ª c·ªßa USER
function loadStudentRFIDHistory(uid) {
    const historyRef = ref(db, "RFID/" + uid + "/accessLog");
    onValue(historyRef, (snapshot) => {
        // l·∫•y d·ªØ li·ªáu 
        const historyData = snapshot.val();
        console.log("History User:", historyData);

        // truy xu·∫•t v√†o ph·∫ßn ƒë·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu
        const historyContainer = $("#historyList");
        historyContainer.empty();

        // ki·ªÉm tra xem c√≥ d·ªØ li·ªáu hay kh√¥ng, n·∫øu kh√¥ng c√≥ s·∫Ω in ra l√† kh√¥ng c√≥ d·ªØ li·ªáu
        if (!historyData) {
            historyContainer.append(`
                <tr><td colspan="8" class="text-center">Kh√¥ng c√≥ l·ªãch s·ª≠ qu√©t th·∫ª</td></tr>
            `);
            return;
        }

        // üîπ Chuy·ªÉn object th√†nh m·∫£ng ƒë·ªÉ d·ªÖ x·ª≠ l√Ω
        let records = Object.values(historyData);

        // üîπ L·∫•y 10 b·∫£n ghi g·∫ßn nh·∫•t
        records.slice(0, 10).forEach(info => {
            const row = $(`
                <tr>
                    <td>${info.time || ""}</td>
                    <td>${info.status || ""}</td>
                </tr>
            `);
            historyContainer.append(row);
        });
    }, { onlyOnce: true });
}

function loadHistoryTable(filtered) {
    const $tableBody = $("#historyList");
    $tableBody.empty();

    if (!filtered || filtered.length === 0) {
        $tableBody.append(`
            <tr>
                <td colspan="2" class="text-center text-muted">Kh√¥ng c√≥ b·∫£n ghi n√†o trong ng√†y n√†y</td>
            </tr>
        `);
        return;
    }

    filtered.forEach(record => {
        const time = record.time || "Kh√¥ng x√°c ƒë·ªãnh";
        const status = record.status || "N/A";

        const row = `
            <tr>
                <td>${time}</td>
                <td>${status}</td>
            </tr>
        `;
        $tableBody.append(row);
    });
}

function filterHistoryByDate(uid, dateStr) {
    if (!uid || !dateStr) {
        console.warn("Thi·∫øu UID ho·∫∑c ng√†y l·ªçc");
        return;
    }

    const historyRef = ref(db, "RFID/" + uid + "/accessLog");
    onValue(historyRef, (snapshot) => {
        const data = snapshot.val();
        if (!data) {
            console.log("Kh√¥ng c√≥ d·ªØ li·ªáu");
            return;
        }

        const records = Object.values(data);

        // T√≠nh timestamp ƒë·∫ßu ng√†y & cu·ªëi ng√†y
        const start = new Date(dateStr);
        start.setHours(0, 0, 0, 0);
        const end = new Date(dateStr);
        end.setHours(23, 59, 59, 999);

        // L·ªçc b·∫£n ghi theo kho·∫£ng th·ªùi gian
        const filtered = records.filter(r => {
            if (!r.time) return false;

            // Chuy·ªÉn chu·ªói time (VD: "08-10-2025 10:56:17") th√†nh timestamp
            const [day, month, yearAndTime] = r.time.split("-");
            const [year, time] = yearAndTime.split(" ");
            const dateObj = new Date(`${year}-${month}-${day} ${time}`);

            return dateObj >= start && dateObj <= end;
        });

        console.log("‚úÖ C√°c b·∫£n ghi trong ng√†y:", filtered);
        loadHistoryTable(filtered);
    }, { onlyOnce: true });
}


// ‚úÖ H√†m x·ª≠ l√Ω ph√™ duy·ªát user
async function approveUser(uid) {
    // L·∫•y d·ªØ li·ªáu t·ª´ form trong modal
    const userData = {
        name: $("#name").val().trim(),
        role: $("#role").val().trim(),
        class: $("#class").val().trim(),
        parentPhone: $("#parentPhone").val().trim(),
        phone: $("#phone").val().trim(),
        address: $("#address").val().trim(),
        gender: $("#gender").val(),
        dob: $("#dob").val(),
    };

    // üîç Validate d·ªØ li·ªáu
    for (const [key, value] of Object.entries(userData)) {
        if (!value) {
            toastr.error(`Tr∆∞·ªùng ${key} kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng`, "L·ªói nh·∫≠p li·ªáu");
            return;
        }
    }

    // N·∫øu h·ª£p l·ªá ‚Üí l∆∞u Firebase
    try {
        // 1Ô∏è‚É£ L∆∞u th√¥ng tin user
        await set(ref(db, "USER/" + uid), userData);

        // 2Ô∏è‚É£ L∆∞u th√¥ng tin RFID
        await set(ref(db, "RFID/" + uid), {
            lastStatus: "Undefined",
            createdAt: formatDateVN(new Date())
        });

        // 3Ô∏è‚É£ X√≥a Pending
        await remove(ref(db, "Pending/" + uid));

        toastr.success("‚úÖ Duy·ªát user th√†nh c√¥ng!", "Duy·ªát USER")
        $("#modal-pending").modal("hide");

    } catch (error) {
        console.error("‚ùå L·ªói ph√™ duy·ªát:", error);
        toastr.error("C√≥ l·ªói khi ph√™ duy·ªát user!", "L·ªói duy·ªát USER")
    }
}

// ‚úÖ X√≥a UID
async function rejectUID(uid) {
    const pendingRef = ref(db, "Pending/" + uid);
    await remove(pendingRef);
    toastr.success(`ƒê√£ x√≥a UID: ${uid}`, "X√≥a USER");
}

// ƒë·ªïi Section khi nh·∫•n n√∫t chuy·ªÉn TAB
function showSection(sectionId) {
    $(".content-section").removeClass("active");
    $(".tab-button").removeClass("active");

    $("#" + sectionId).addClass("active");
    $(".tab-button[data-section='" + sectionId + "']").addClass("active");
}

// ‚úÖ H√†m x√≥a h·ªçc sinh + d·ªØ li·ªáu RFID
function deleteStudent(uid) {
    const updates = {};
    updates["USER/" + uid] = null; // x√≥a ·ªü Students
    updates["RFID/" + uid] = null;     // x√≥a ·ªü RFID

    update(ref(db), updates)
        .then(() => {
            toastr.success("‚úÖ ƒê√£ x√≥a h·ªçc sinh v√† d·ªØ li·ªáu RFID th√†nh c√¥ng!");
            // ƒë√≥ng modal x√°c nh·∫≠n x√≥a
            $("#deleteInfoModal").modal("hide");
            loadStudentList(); // reload l·∫°i danh s√°ch
        })
        .catch((error) => {
            console.error("‚ùå L·ªói khi x√≥a h·ªçc sinh:", error);
            toastr.error("Kh√¥ng th·ªÉ x√≥a h·ªçc sinh. Vui l√≤ng th·ª≠ l·∫°i.");
        });
}

function openEditModal(uid) {
    const userRef = ref(db, "USER/" + uid);

    // L∆∞u UID v√†o hidden input trong modal
    $("#editUid").val(uid);

    // Hi·ªán modal
    $("#modal-edit-student-list").modal("show");

    // L·∫•y d·ªØ li·ªáu t·ª´ Firebase v√† ƒë·ªï v√†o form
    onValue(userRef, (snapshot) => {
        const data = snapshot.val();
        if (data) {
            $("#student-name").val(data.name || "");
            $("#student-role").val(data.role || "");
            $("#student-class").val(data.class || "");
            $("#student-parentPhone").val(data.parentPhone || "");
            $("#student-phone").val(data.phone || "");
            $("#student-address").val(data.address || "");
            $("#student-gender").val(data.gender || "");
            $("#student-dob").val(data.dob || "");
        }
    }, { onlyOnce: true });
}

// h√†m x√°c nh·∫≠n EDIT th√¥ng tin h·ªçc sinh
function updateStudent(uid, updatedData) {
    const userRef = ref(db, "USER/" + uid);

    // C·∫≠p nh·∫≠t d·ªØ li·ªáu
    update(userRef, updatedData)
        .then(() => {
            toastr.success("‚úÖ C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");
            $("#modal-edit-student-list").modal("hide"); // ƒë√≥ng modal sau khi update
        })
        .catch((error) => {
            console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t:", error);
            toastr.error("L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu!");
        });
}

// h√†m hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt c·ªßa USER khi nh·∫•n n√∫t view info
function showStudentInfo(uid) {
    const userRef = ref(db, "USER/" + uid);

    // Hi·ªán modal 
    $("#viewInfoModal").modal("show");

    onValue(userRef, (snapshot) => {
        const data = snapshot.val();
        if (data) {
            $("#view-uid").text(uid || "");
            $("#view-Name").text(data.name || "");
            $("#view-Role").text(data.role || "");
            $("#view-Class").text(data.class || "");
            $("#view-PhonePH").text(data.parentPhone || "");
            $("#view-PhoneHS").text(data.phone || "");
            $("#view-Address").text(data.address || "");
            $("#view-Gender").text(data.gender || "");
            $("#view-Birthday").text(data.dob || "");
        }
    }, { onlyOnce: true });
}



// ‚úÖ Ch·ªâ g·∫Øn s·ª± ki·ªán trong $(document).ready
$(document).ready(function () {

    // khi nh·∫•n n√∫t chuy·ªÉn tab
    $('.tab-button').on('click', function () {
        const sectionId = $(this).data('section');
        showSection(sectionId, this);
        console.log(sectionId);
        if (sectionId === "student-list") {
            loadStudentList(); // ‚úÖ load khi nh·∫•n Student List
        } else if (sectionId === "pendingSection") {
            loadPending();
        }
    });

    // G·∫Øn s·ª± ki·ªán n√∫t duy·ªát trong modal
    $(document).on("click", "#confirm-approve", function () {
        const uid = $(this).data("uid");  // l·∫•y uid g·∫Øn v√†o n√∫t
        approveUser(uid);
    });

    // s·ª± ki·ªán khi nh·∫•n n√∫t edit trong Student List
    $(document).on("click", ".edit-btn", function () {
        // l·∫•y uid c·ªßa USER
        const uid = $(this).data("uid");
        console.log(uid);

        // hi·ªán d·ªØ li·ªáu c·ªßa USER l√™n form
        openEditModal(uid);
    })

    // khi nh·∫•n n√∫t cancel trong modal
    $(document).on("click", "#cancel-approve", function () {
        // ƒë√≥ng modal
        $("#modal-pending").modal("hide");
        $("#modal-edit-student-list").modal("hide");
        $("#viewInfoModal").modal("hide");
        $("#viewHistoryModal").modal("hide");
        $("#deleteInfoModal").modal("hide");
    })

    // X√≥a UID trong danh s√°ch Pending
    $(document).on("click", ".reject-btn", function () {
        const uid = $(this).data("uid");
        console.log(uid);
        rejectUID(uid);
    });

    // s·ª± ki·ªán khi nh·∫•n n√∫t X√≥a USER trong Student List
    $(document).on("click", ".delete-btn", function () {
        // l·∫•y d·ªØ li·ªáu c·ªßa USER
        const uid = $(this).data("uid");

        // log uid ra ƒë·ªÉ ki·ªÉm tra
        console.log(uid);

        // G√°n uid v√†o n√∫t confirm-delete trong modal
        $("#confirm-delete").data("uid", uid);

        // m·ªü modal x√°c nh·∫≠n x√≥a
        $("#deleteInfoModal").modal("show");
    });

    // s·ª± ki·ªán khi nh·∫•n n√∫t x√°c nh·∫≠n x√≥a trong MODAL
    $(document).on("click", "#confirm-delete", function () {
        // l·∫•y d·ªØ li·ªáu c·ªßa USER
        const uid = $(this).data("uid");

        // log uid ra ƒë·ªÉ ki·ªÉm tra
        console.log(uid);

        // g·ªçi h√†m x√≥a USER
        deleteStudent(uid);
    })

    // Khi nh·∫•n duy·ªát trong danh s√°ch Pending
    $(document).on("click", ".approve-btn", function () {
        const uid = $(this).data("uid");
        console.log("üëâ UID khi b·∫•m duy·ªát:", uid);

        // Reset form
        $("#modal-pending input").val("");
        $("#gender").val("Nam");

        // G·∫Øn uid v√†o n√∫t submit trong modal
        $("#confirm-approve").data("uid", uid);

        // M·ªü modal
        $("#modal-pending").modal("show");
    });

    // s·ª± ki·ªán khi nh·∫•n n√∫t l∆∞u thay ƒë·ªïi trong  Student List Ed·ªât
    $("#student-save-edit").on("click", function () {
        const uid = $("#editUid").val();

        // L·∫•y d·ªØ li·ªáu m·ªõi t·ª´ form
        const updatedData = {
            name: $("#student-name").val(),
            class: $("#student-class").val(),
            phoneParent: $("#student-parentPhone").val(),
            phone: $("#student-phone").val(),
            address: $("#student-address").val(),
            gender: $("#student-gender").val(),
            dob: $("#student-dob").val()
        };

        // G·ªçi h√†m update
        updateStudent(uid, updatedData);
    });

    // G·∫Øn s·ª± ki·ªán click cho n√∫t View Info
    $(document).on("click", ".view-info-btn", function () {
        const uid = $(this).data("uid");
        showStudentInfo(uid);
    });

    // Khi b·∫•m n√∫t View History
    $(document).on("click", ".view-history-btn", function () {
        const uid = $(this).data("uid");
        console.log("Xem l·ªãch s·ª≠ UID:", uid);

        // Reset n·ªôi dung c≈©
        $("#historyList").html("<tr><td colspan='2'>ƒêang t·∫£i d·ªØ li·ªáu...</td></tr>");

        // Hi·ªán modal
        $("#viewHistoryModal").modal("show");

        // L∆∞u UID v√†o modal ƒë·ªÉ s·ª≠ d·ª•ng sau n√†y
        $("#viewHistoryModal").data("current-uid", uid);

        // üöÄ B∆∞·ªõc n√†y sau s·∫Ω load d·ªØ li·ªáu t·ª´ Firebase
        loadStudentRFIDHistory(uid);
    });

    // Khi ng∆∞·ªùi d√πng ch·ªçn ng√†y ƒë·ªÉ l·ªçc
    $("#filterDate").on("change", function () {
        const selectedDate = $(this).val(); // ƒë·ªãnh d·∫°ng yyyy-mm-dd
        console.log("Ng√†y ƒë∆∞·ª£c ch·ªçn:", selectedDate);

        // Ki·ªÉm tra n·∫øu ƒë√£ c√≥ UID c·ªßa h·ªçc sinh ƒëang xem
        const uid = $("#viewHistoryModal").data("current-uid"); // sau n√†y ta g·∫Øn class active khi m·ªü modal
        console.log("UID ƒëang xem:", uid);

        // G·ªçi h√†m l·ªçc (ch∆∞a vi·∫øt)
        filterHistoryByDate(uid, selectedDate);
    });

    // s·ª± ki·ªán khi nh·∫•n n√∫t hi·ªÉn th·ªã t·∫•t c·∫£ b·∫£n ghi g·∫ßn nh·∫•t c·ªßa USER
    $("#showAllBtn").on("click", function () {
        // l·∫•y uid USER ƒë√£ l∆∞u trong id g·∫Øn trong modal
        const uid = $("#viewHistoryModal").data("current-uid");
        console.log("UID ƒëang xem:", uid);

        // load t·∫•t c·∫£ b·∫£n ghi g·∫ßn nh·∫•t theo uid USER
        loadStudentRFIDHistory(uid);
    })

    // ƒêƒÉng nh·∫≠p ·∫©n danh Firebase
    signInAnonymously(auth).then(() => {
        console.log("‚úÖ Anonymous signed in");
        loadPending();
    }).catch((error) => {
        console.error("‚ùå L·ªói ƒëƒÉng nh·∫≠p:", error);
    });
});
