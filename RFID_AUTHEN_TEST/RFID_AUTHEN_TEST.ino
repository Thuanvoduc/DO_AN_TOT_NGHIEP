#include <SPI.h>
#include <MFRC522.h>
#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"
#include "time.h"
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

#define SS_PIN 5
#define RST_PIN 2
#define BUZZER_PIN 25                // buzzer pin
MFRC522 rfid(SS_PIN, RST_PIN);       // setup RFID
LiquidCrystal_I2C lcd(0x27, 16, 2);  // setup LCD

// WiFi
#define WIFI_SSID "NHAM COFFEE"
#define WIFI_PASSWORD "nhamquan10"

// Firebase
#define API_KEY "AIzaSyDML_o7tVQOf7wrzdA3NasklY5Wb3cPCjo"
#define DATABASE_URL "https://do-an-tot-nghiep-9ac13-default-rtdb.firebaseio.com/"

FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

// NTP config
const char* ntpServer = "time.google.com";
const long gmtOffset_sec = 7 * 3600;  // GMT+7 cho Vi·ªát Nam
const int daylightOffset_sec = 0;

// Bi·∫øn to√†n c·ª•c c·ªßa NTP
unsigned long lastNtpSync = 0;
const unsigned long ntpInterval = 30 * 60 * 1000;  // 30 ph√∫t (30 * 60 * 1000 ms)

// Bi·∫øn to√†n c·ª•c c·ªßa LCD
unsigned long lastDisplayTime = 0;
bool showingMessage = false;

// h√†m c·ªßa buzzer
void beep(int duration) {
  digitalWrite(BUZZER_PIN, LOW);
  delay(duration);
  digitalWrite(BUZZER_PIN, HIGH);
}

// h√†m format th·ªùi gians
String getTime() {
  time_t now;
  struct tm timeinfo;
  int retry = 0;

  time(&now);
  localtime_r(&now, &timeinfo);

  while (now < 100000 && retry < 5) {  // n·∫øu ch∆∞a c√≥ th·ªùi gian h·ª£p l·ªá
    Serial.println("‚è≥ Ch∆∞a l·∫•y ƒë∆∞·ª£c NTP, th·ª≠ l·∫°i...");
    configTime(7 * 3600, 0, "time.google.com");
    delay(2000);  // ch·ªù NTP c·∫≠p nh·∫≠t
    time(&now);
    retry++;
  }

  if (now < 100000) {
    return "NTP Error";
  }

  char buf[20];
  strftime(buf, sizeof(buf), "%d-%m-%Y %H:%M:%S", &timeinfo);
  return String(buf);
}

// h√†m hi·ªÉn th·ªã giao di·ªán ch·ªù c·ªßa LCD
void showDefaultScreen() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Xin moi quet the");
  lcd.setCursor(0, 1);
  lcd.print("----------------");
  showingMessage = false;
}

// h√†m hi·ªÉn th·ªã th√¥ng tin th·∫ª tr√™n LCD
void showMessage(String line1, String line2) {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(line1);
  lcd.setCursor(0, 1);
  lcd.print(line2);
  lastDisplayTime = millis();
  showingMessage = true;
}

// h√†m chuy·ªÉn chu·ªói t·ª´ c√≥ d·∫•u sang kh√¥ng d·∫•u
String removeVietnameseTones(String str) {
  str.replace("√°", "a"); str.replace("√†", "a"); str.replace("·∫£", "a"); str.replace("√£", "a"); str.replace("·∫°", "a");
  str.replace("ƒÉ", "a"); str.replace("·∫Ø", "a"); str.replace("·∫±", "a"); str.replace("·∫≥", "a"); str.replace("·∫µ", "a"); str.replace("·∫∑", "a");
  str.replace("√¢", "a"); str.replace("·∫•", "a"); str.replace("·∫ß", "a"); str.replace("·∫©", "a"); str.replace("·∫´", "a"); str.replace("·∫≠", "a");

  str.replace("ƒë", "d");

  str.replace("√©", "e"); str.replace("√®", "e"); str.replace("·∫ª", "e"); str.replace("·∫Ω", "e"); str.replace("·∫π", "e");
  str.replace("√™", "e"); str.replace("·∫ø", "e"); str.replace("·ªÅ", "e"); str.replace("·ªÉ", "e"); str.replace("·ªÖ", "e"); str.replace("·ªá", "e");

  str.replace("√≠", "i"); str.replace("√¨", "i"); str.replace("·ªâ", "i"); str.replace("ƒ©", "i"); str.replace("·ªã", "i");

  str.replace("√≥", "o"); str.replace("√≤", "o"); str.replace("·ªè", "o"); str.replace("√µ", "o"); str.replace("·ªç", "o");
  str.replace("√¥", "o"); str.replace("·ªë", "o"); str.replace("·ªì", "o"); str.replace("·ªï", "o"); str.replace("·ªó", "o"); str.replace("·ªô", "o");
  str.replace("∆°", "o"); str.replace("·ªõ", "o"); str.replace("·ªù", "o"); str.replace("·ªü", "o"); str.replace("·ª°", "o"); str.replace("·ª£", "o");

  str.replace("√∫", "u"); str.replace("√π", "u"); str.replace("·ªß", "u"); str.replace("≈©", "u"); str.replace("·ª•", "u");
  str.replace("∆∞", "u"); str.replace("·ª©", "u"); str.replace("·ª´", "u"); str.replace("·ª≠", "u"); str.replace("·ªØ", "u"); str.replace("·ª±", "u");

  str.replace("√Ω", "y"); str.replace("·ª≥", "y"); str.replace("·ª∑", "y"); str.replace("·ªπ", "y"); str.replace("·ªµ", "y");

  // Vi·∫øt hoa
  str.replace("√Å", "A"); str.replace("√Ä", "A"); str.replace("·∫¢", "A"); str.replace("√É", "A"); str.replace("·∫†", "A");
  str.replace("ƒÇ", "A"); str.replace("·∫Æ", "A"); str.replace("·∫∞", "A"); str.replace("·∫≤", "A"); str.replace("·∫¥", "A"); str.replace("·∫∂", "A");
  str.replace("√Ç", "A"); str.replace("·∫§", "A"); str.replace("·∫¶", "A"); str.replace("·∫®", "A"); str.replace("·∫™", "A"); str.replace("·∫¨", "A");

  str.replace("ƒê", "D");

  str.replace("√â", "E"); str.replace("√à", "E"); str.replace("·∫∫", "E"); str.replace("·∫º", "E"); str.replace("·∫∏", "E");
  str.replace("√ä", "E"); str.replace("·∫æ", "E"); str.replace("·ªÄ", "E"); str.replace("·ªÇ", "E"); str.replace("·ªÑ", "E"); str.replace("·ªÜ", "E");

  str.replace("√ç", "I"); str.replace("√å", "I"); str.replace("·ªà", "I"); str.replace("ƒ®", "I"); str.replace("·ªä", "I");

  str.replace("√ì", "O"); str.replace("√í", "O"); str.replace("·ªé", "O"); str.replace("√ï", "O"); str.replace("·ªå", "O");
  str.replace("√î", "O"); str.replace("·ªê", "O"); str.replace("·ªí", "O"); str.replace("·ªî", "O"); str.replace("·ªñ", "O"); str.replace("·ªò", "O");
  str.replace("∆†", "O"); str.replace("·ªö", "O"); str.replace("·ªú", "O"); str.replace("·ªû", "O"); str.replace("·ª†", "O"); str.replace("·ª¢", "O");

  str.replace("√ö", "U"); str.replace("√ô", "U"); str.replace("·ª¶", "U"); str.replace("≈®", "U"); str.replace("·ª§", "U");
  str.replace("∆Ø", "U"); str.replace("·ª®", "U"); str.replace("·ª™", "U"); str.replace("·ª¨", "U"); str.replace("·ªÆ", "U"); str.replace("·ª∞", "U");

  str.replace("√ù", "Y"); str.replace("·ª≤", "Y"); str.replace("·ª∂", "Y"); str.replace("·ª∏", "Y"); str.replace("·ª¥", "Y");

  return str;
}

String shortenName(String fullName) {
  fullName.trim();  // lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
  int start = 0;
  int idx = fullName.indexOf(' ');
  String parts[10]; // m·∫£ng ch·ª©a t·ªëi ƒëa 10 t·ª´
  int count = 0;

  // T√°ch t√™n th√†nh c√°c t·ª´
  while (idx >= 0) {
    parts[count++] = fullName.substring(start, idx);
    start = idx + 1;
    idx = fullName.indexOf(' ', start);
  }
  parts[count++] = fullName.substring(start); // th√™m t·ª´ cu·ªëi c√πng

  // N·∫øu <= 3 ch·ªØ th√¨ ƒë·∫£o l·∫°i cho h·ª£p format
  if (count <= 3) {
    String result = parts[count - 1];
    for (int i = 0; i < count - 1; i++) {
      result += " " + parts[i];
    }
    return result;
  }

  // N·∫øu > 3 ch·ªØ ‚Üí ch·ªâ l·∫•y 3 ch·ªØ (T√™n + H·ªç + ƒê·ªám ƒë·∫ßu)
  String result = parts[count - 1];   // T√™n ch√≠nh (cu·ªëi)
  result += " " + parts[0];           // H·ªç (ƒë·∫ßu ti√™n)
  result += " " + parts[1];           // ƒê·ªám (ƒë·∫ßu ti√™n)
  
  return result;
}

// h√†m setup
void setup() {
  Serial.begin(115200);
  SPI.begin();
  rfid.PCD_Init();

  // kh·ªüi t·∫°o LCD
  lcd.init();
  lcd.backlight();

  // kh·ªüi t·∫°o buzzer
  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(BUZZER_PIN, HIGH);

  // kh·ªüi t·∫°o wifi v√† ki·ªÉm tra
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(300);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ ƒê√£ k·∫øt n·ªëi WiFi");

  // Kh·ªüi t·∫°o NTP v√† ki·ªÉm tra (retry cho t·ªõi khi sync ƒë∆∞·ª£c)
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  struct tm timeinfo;
  while (!getLocalTime(&timeinfo)) {
    Serial.println("‚ùå Failed to obtain time, retrying...");
    delay(2000);  // ƒë·ª£i 2s r·ªìi th·ª≠ l·∫°i
  }
  Serial.println("‚úÖ Time synced!");

  // Kh·ªüi t·∫°o v√† ƒêƒÉng nh·∫≠p FIREBASE d∆∞·ªõi d·∫°ng Anonymous (ch·ªâ ch·∫°y sau khi c√≥ time)
  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;
  Firebase.signUp(&config, &auth, "", "");
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);

  Serial.println("‚úÖ Ready to read RFID...");
  showDefaultScreen();

}

// v√≤ng l·∫∑p ch√≠nh
void loop() {
  // N·∫øu ƒëang hi·ªÉn th·ªã th√¥ng ƒëi·ªáp v√† qu√° 3 gi√¢y th√¨ tr·∫£ v·ªÅ m·∫∑c ƒë·ªãnh
  if (showingMessage && millis() - lastDisplayTime > 3000) {
    showDefaultScreen();
  }

  // üîÑ Sync l·∫°i NTP ƒë·ªãnh k·ª≥
  if (millis() - lastNtpSync > ntpInterval) {
    Serial.println("üîÑ Sync l·∫°i NTP...");
    configTime(7 * 3600, 0, "time.google.com");  // GMT+7 (VN)
    lastNtpSync = millis();
  }

  // N·∫øu Firebase ch∆∞a s·∫µn s√†ng th√¨ b·ªè qua v√≤ng l·∫∑p n√†y
  if (!Firebase.ready()) {
    Serial.println("‚ö†Ô∏è Firebase ch∆∞a s·∫µn s√†ng, b·ªè qua v√≤ng l·∫∑p...");
    delay(500);
    return;
  }

  // Ki·ªÉm tra th·∫ª RFID
  if (!rfid.PICC_IsNewCardPresent() || !rfid.PICC_ReadCardSerial()) return;

  // L·∫•y UID
  String uid = "";
  for (byte i = 0; i < rfid.uid.size; i++) {
    uid += String(rfid.uid.uidByte[i], HEX);
  }
  uid.toUpperCase();

  beep(100);

  String timeNow = getTime();
  Serial.println("üîë UID: " + uid);
  Serial.println("‚è∞ Time: " + timeNow);

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("UID:");
  lcd.print(uid);

  lcd.setCursor(0, 1);
  lcd.print(timeNow);


  // Ki·ªÉm tra UID ƒë√£ c√≥ trong DB ch∆∞a
  String statusPath = "/RFID/" + uid + "/lastStatus"; // ƒë∆∞·ªùng d·∫´n l·∫•y d·ªØ li·ªáu c·ªßa last status
  String namePath = "/USER/" + uid + "/name"; // ƒë∆∞·ªùng d·∫´n l·∫•y d·ªØ li·ªáu name c·ªßa th·∫ª n·∫øu c√≥ tr√™n h·ªá th·ªëng
  if (Firebase.RTDB.getString(&fbdo, statusPath)) {
    // UID ƒë√£ t·ªìn t·∫°i ‚Üí x·ª≠ l√Ω b√¨nh th∆∞·ªùng
    String lastStatus = fbdo.stringData();

    // X√°c ƒë·ªãnh tr·∫°ng th√°i m·ªõi
    String newStatus = (lastStatus == "Len-xe") ? "Xuong-xe" : "Len-xe";

    // Epoch √¢m l√†m key
    time_t now;
    time(&now);
    long negativeKey = -now;

    String logPath = "/RFID/" + uid + "/accessLog/" + String(negativeKey);

    // T·∫°o JSON g·ªìm c·∫£ status v√† time
    FirebaseJson json;
    json.set("status", newStatus);
    json.set("time", timeNow);

    // Ghi v√†o accessLog
    if (Firebase.RTDB.setJSON(&fbdo, logPath, &json)) {
      Serial.println("‚úÖ Th√™m log: " + newStatus);
    } else {
      Serial.println("‚ùå L·ªói: " + fbdo.errorReason());
    }

    // C·∫≠p nh·∫≠t lastStatus
    Firebase.RTDB.setString(&fbdo, statusPath, newStatus);

    // L·∫•y d·ªØ li·ªáu name c·ªßa USER
    Firebase.RTDB.getString(&fbdo, namePath.c_str());
    String studentName = fbdo.stringData();
    String lcdName = removeVietnameseTones(studentName);
    String lcdFormatName = shortenName(lcdName);

    beep(100);
    delay(100);
    beep(100);  // k√™u 2 l·∫ßn

    // Hi·ªÉn th·ªã l√™n LCD
    showMessage("" + lcdFormatName, "Status:" + newStatus);

  } else {
    // UID ch∆∞a t·ªìn t·∫°i ‚Üí ƒë∆∞a v√†o Pending
    String pendingPath = "/Pending/" + uid;

    FirebaseJson json;
    json.set("time", timeNow);
    json.set("status", "Chua-duyet");

    if (Firebase.RTDB.setJSON(&fbdo, pendingPath, &json)) {
      Serial.println("‚ö†Ô∏è UID m·ªõi, ƒë∆∞a v√†o Pending ch·ªù duy·ªát: " + uid);
    } else {
      Serial.println("‚ùå L·ªói Pending: " + fbdo.errorReason());
    }

    beep(500);  // k√™u d√†i h∆°n

    // UID m·ªõi
    showMessage("UID moi", "Cho duyet...");
  }

  delay(2000);
}
